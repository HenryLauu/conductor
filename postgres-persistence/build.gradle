buildscript {

    repositories {
        jcenter()
    }

    dependencies {
        classpath "com.avast.gradle:gradle-docker-compose-plugin:${revDockerCompose}"
    }
}

apply plugin: 'docker-compose'

dependencies {
    implementation project(':conductor-common')
    implementation project(':conductor-core')
    implementation 'org.springframework.boot:spring-boot-starter'

    // SBMTODO: remove guava dep
    implementation "com.google.guava:guava:${revGuava}"

    implementation "com.fasterxml.jackson.core:jackson-databind"
    implementation "com.fasterxml.jackson.core:jackson-core"

    implementation "org.apache.commons:commons-lang3"
    implementation "org.postgresql:postgresql"
    implementation "com.zaxxer:HikariCP"
    implementation "org.flywaydb:flyway-core"

    testImplementation "org.testinfected.hamcrest-matchers:all-matchers:${revHamcrestAllMatchers}"
    testImplementation project(':conductor-core').sourceSets.test.output
}

dockerCompose{
    integrationTestDocker{
        useComposeFiles = ["./docker-compose.yml"]
        startedServices = ["postgresdb"]
        waitForTcpPorts = true
        isRequiredBy(tasks.test)
        projectName = project.name
    }
}

task intDockerStart() {
    group = "Postgres data access based Integration Test"
    description "Starts a local db container for postgres data access integration tests."
    dependsOn integrationTestDockerComposeDownForced
    dependsOn integrationTestDockerComposeUp
}

task intDockerDown(dependsOn: integrationTestDockerComposeDownForced) {
    group = "Postgres data access based Integration Test"
    description "Stops a local db container for postgres data access integration tests."
}

test.doFirst {
    dockerCompose.exposeAsSystemProperties(test)
}

test.finalizedBy("intDockerDown")

test {
    //the SQL unit tests must run within the same JVM to share the same embedded DB
    maxParallelForks = 1
}
